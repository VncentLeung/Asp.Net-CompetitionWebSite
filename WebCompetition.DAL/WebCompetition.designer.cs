#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebCompetition.DAL
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="WebCompetion")]
	public partial class WebCompetitionDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void Inserteroll(eroll instance);
    partial void Updateeroll(eroll instance);
    partial void Deleteeroll(eroll instance);
    partial void Insertstudent(student instance);
    partial void Updatestudent(student instance);
    partial void Deletestudent(student instance);
    partial void Insertmanager(manager instance);
    partial void Updatemanager(manager instance);
    partial void Deletemanager(manager instance);
    partial void Insertnews(news instance);
    partial void Updatenews(news instance);
    partial void Deletenews(news instance);
    partial void Insertrace(race instance);
    partial void Updaterace(race instance);
    partial void Deleterace(race instance);
    #endregion
		
		public WebCompetitionDataContext() : 
				base(global::WebCompetition.DAL.Properties.Settings.Default.WebCompetionConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public WebCompetitionDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WebCompetitionDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WebCompetitionDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public WebCompetitionDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<eroll> eroll
		{
			get
			{
				return this.GetTable<eroll>();
			}
		}
		
		public System.Data.Linq.Table<student> student
		{
			get
			{
				return this.GetTable<student>();
			}
		}
		
		public System.Data.Linq.Table<manager> manager
		{
			get
			{
				return this.GetTable<manager>();
			}
		}
		
		public System.Data.Linq.Table<news> news
		{
			get
			{
				return this.GetTable<news>();
			}
		}
		
		public System.Data.Linq.Table<race> race
		{
			get
			{
				return this.GetTable<race>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.eroll")]
	public partial class eroll : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _sid;
		
		private int _rid;
		
		private string _rname;
		
		private System.Nullable<bool> _estatus;
		
		private System.Nullable<bool> _esubmit;
		
		private string _eawards;
		
		private string _esubmitfile;
		
		private EntityRef<student> _student;
		
		private EntityRef<race> _race;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsidChanging(string value);
    partial void OnsidChanged();
    partial void OnridChanging(int value);
    partial void OnridChanged();
    partial void OnrnameChanging(string value);
    partial void OnrnameChanged();
    partial void OnestatusChanging(System.Nullable<bool> value);
    partial void OnestatusChanged();
    partial void OnesubmitChanging(System.Nullable<bool> value);
    partial void OnesubmitChanged();
    partial void OneawardsChanging(string value);
    partial void OneawardsChanged();
    partial void OnesubmitfileChanging(string value);
    partial void OnesubmitfileChanged();
    #endregion
		
		public eroll()
		{
			this._student = default(EntityRef<student>);
			this._race = default(EntityRef<race>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sid", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string sid
		{
			get
			{
				return this._sid;
			}
			set
			{
				if ((this._sid != value))
				{
					if (this._student.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnsidChanging(value);
					this.SendPropertyChanging();
					this._sid = value;
					this.SendPropertyChanged("sid");
					this.OnsidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int rid
		{
			get
			{
				return this._rid;
			}
			set
			{
				if ((this._rid != value))
				{
					if (this._race.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnridChanging(value);
					this.SendPropertyChanging();
					this._rid = value;
					this.SendPropertyChanged("rid");
					this.OnridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rname", DbType="NVarChar(100)")]
		public string rname
		{
			get
			{
				return this._rname;
			}
			set
			{
				if ((this._rname != value))
				{
					this.OnrnameChanging(value);
					this.SendPropertyChanging();
					this._rname = value;
					this.SendPropertyChanged("rname");
					this.OnrnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_estatus", DbType="Bit")]
		public System.Nullable<bool> estatus
		{
			get
			{
				return this._estatus;
			}
			set
			{
				if ((this._estatus != value))
				{
					this.OnestatusChanging(value);
					this.SendPropertyChanging();
					this._estatus = value;
					this.SendPropertyChanged("estatus");
					this.OnestatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_esubmit", DbType="Bit")]
		public System.Nullable<bool> esubmit
		{
			get
			{
				return this._esubmit;
			}
			set
			{
				if ((this._esubmit != value))
				{
					this.OnesubmitChanging(value);
					this.SendPropertyChanging();
					this._esubmit = value;
					this.SendPropertyChanged("esubmit");
					this.OnesubmitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_eawards", DbType="NVarChar(100)")]
		public string eawards
		{
			get
			{
				return this._eawards;
			}
			set
			{
				if ((this._eawards != value))
				{
					this.OneawardsChanging(value);
					this.SendPropertyChanging();
					this._eawards = value;
					this.SendPropertyChanged("eawards");
					this.OneawardsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_esubmitfile", DbType="NVarChar(100)")]
		public string esubmitfile
		{
			get
			{
				return this._esubmitfile;
			}
			set
			{
				if ((this._esubmitfile != value))
				{
					this.OnesubmitfileChanging(value);
					this.SendPropertyChanging();
					this._esubmitfile = value;
					this.SendPropertyChanged("esubmitfile");
					this.OnesubmitfileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="student_eroll", Storage="_student", ThisKey="sid", OtherKey="sid", IsForeignKey=true)]
		public student student
		{
			get
			{
				return this._student.Entity;
			}
			set
			{
				student previousValue = this._student.Entity;
				if (((previousValue != value) 
							|| (this._student.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._student.Entity = null;
						previousValue.eroll.Remove(this);
					}
					this._student.Entity = value;
					if ((value != null))
					{
						value.eroll.Add(this);
						this._sid = value.sid;
					}
					else
					{
						this._sid = default(string);
					}
					this.SendPropertyChanged("student");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="race_eroll", Storage="_race", ThisKey="rid", OtherKey="rid", IsForeignKey=true)]
		public race race
		{
			get
			{
				return this._race.Entity;
			}
			set
			{
				race previousValue = this._race.Entity;
				if (((previousValue != value) 
							|| (this._race.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._race.Entity = null;
						previousValue.eroll.Remove(this);
					}
					this._race.Entity = value;
					if ((value != null))
					{
						value.eroll.Add(this);
						this._rid = value.rid;
					}
					else
					{
						this._rid = default(int);
					}
					this.SendPropertyChanged("race");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.student")]
	public partial class student : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _sid;
		
		private string _sname;
		
		private string _snickname;
		
		private string _ssex;
		
		private string _semail;
		
		private string _sphone;
		
		private string _spassword;
		
		private EntitySet<eroll> _eroll;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnsidChanging(string value);
    partial void OnsidChanged();
    partial void OnsnameChanging(string value);
    partial void OnsnameChanged();
    partial void OnsnicknameChanging(string value);
    partial void OnsnicknameChanged();
    partial void OnssexChanging(string value);
    partial void OnssexChanged();
    partial void OnsemailChanging(string value);
    partial void OnsemailChanged();
    partial void OnsphoneChanging(string value);
    partial void OnsphoneChanged();
    partial void OnspasswordChanging(string value);
    partial void OnspasswordChanged();
    #endregion
		
		public student()
		{
			this._eroll = new EntitySet<eroll>(new Action<eroll>(this.attach_eroll), new Action<eroll>(this.detach_eroll));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sid", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string sid
		{
			get
			{
				return this._sid;
			}
			set
			{
				if ((this._sid != value))
				{
					this.OnsidChanging(value);
					this.SendPropertyChanging();
					this._sid = value;
					this.SendPropertyChanged("sid");
					this.OnsidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sname", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string sname
		{
			get
			{
				return this._sname;
			}
			set
			{
				if ((this._sname != value))
				{
					this.OnsnameChanging(value);
					this.SendPropertyChanging();
					this._sname = value;
					this.SendPropertyChanged("sname");
					this.OnsnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_snickname", DbType="NVarChar(50)")]
		public string snickname
		{
			get
			{
				return this._snickname;
			}
			set
			{
				if ((this._snickname != value))
				{
					this.OnsnicknameChanging(value);
					this.SendPropertyChanging();
					this._snickname = value;
					this.SendPropertyChanged("snickname");
					this.OnsnicknameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ssex", DbType="NVarChar(2)")]
		public string ssex
		{
			get
			{
				return this._ssex;
			}
			set
			{
				if ((this._ssex != value))
				{
					this.OnssexChanging(value);
					this.SendPropertyChanging();
					this._ssex = value;
					this.SendPropertyChanged("ssex");
					this.OnssexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_semail", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string semail
		{
			get
			{
				return this._semail;
			}
			set
			{
				if ((this._semail != value))
				{
					this.OnsemailChanging(value);
					this.SendPropertyChanging();
					this._semail = value;
					this.SendPropertyChanged("semail");
					this.OnsemailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_sphone", DbType="NVarChar(20)")]
		public string sphone
		{
			get
			{
				return this._sphone;
			}
			set
			{
				if ((this._sphone != value))
				{
					this.OnsphoneChanging(value);
					this.SendPropertyChanging();
					this._sphone = value;
					this.SendPropertyChanged("sphone");
					this.OnsphoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_spassword", DbType="NVarChar(20)")]
		public string spassword
		{
			get
			{
				return this._spassword;
			}
			set
			{
				if ((this._spassword != value))
				{
					this.OnspasswordChanging(value);
					this.SendPropertyChanging();
					this._spassword = value;
					this.SendPropertyChanged("spassword");
					this.OnspasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="student_eroll", Storage="_eroll", ThisKey="sid", OtherKey="sid")]
		public EntitySet<eroll> eroll
		{
			get
			{
				return this._eroll;
			}
			set
			{
				this._eroll.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_eroll(eroll entity)
		{
			this.SendPropertyChanging();
			entity.student = this;
		}
		
		private void detach_eroll(eroll entity)
		{
			this.SendPropertyChanging();
			entity.student = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.manager")]
	public partial class manager : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _mid;
		
		private string _mnickname;
		
		private string _mmail;
		
		private string _mpassword;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnmidChanging(string value);
    partial void OnmidChanged();
    partial void OnmnicknameChanging(string value);
    partial void OnmnicknameChanged();
    partial void OnmmailChanging(string value);
    partial void OnmmailChanged();
    partial void OnmpasswordChanging(string value);
    partial void OnmpasswordChanged();
    #endregion
		
		public manager()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mid", DbType="NVarChar(20) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string mid
		{
			get
			{
				return this._mid;
			}
			set
			{
				if ((this._mid != value))
				{
					this.OnmidChanging(value);
					this.SendPropertyChanging();
					this._mid = value;
					this.SendPropertyChanged("mid");
					this.OnmidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mnickname", DbType="NVarChar(20)")]
		public string mnickname
		{
			get
			{
				return this._mnickname;
			}
			set
			{
				if ((this._mnickname != value))
				{
					this.OnmnicknameChanging(value);
					this.SendPropertyChanging();
					this._mnickname = value;
					this.SendPropertyChanged("mnickname");
					this.OnmnicknameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mmail", DbType="NVarChar(50)")]
		public string mmail
		{
			get
			{
				return this._mmail;
			}
			set
			{
				if ((this._mmail != value))
				{
					this.OnmmailChanging(value);
					this.SendPropertyChanging();
					this._mmail = value;
					this.SendPropertyChanged("mmail");
					this.OnmmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_mpassword", DbType="NVarChar(20)")]
		public string mpassword
		{
			get
			{
				return this._mpassword;
			}
			set
			{
				if ((this._mpassword != value))
				{
					this.OnmpasswordChanging(value);
					this.SendPropertyChanging();
					this._mpassword = value;
					this.SendPropertyChanged("mpassword");
					this.OnmpasswordChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.news")]
	public partial class news : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _ntitle;
		
		private string _ncontent;
		
		private System.Nullable<System.DateTime> _ntime;
		
		private int _nid;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnntitleChanging(string value);
    partial void OnntitleChanged();
    partial void OnncontentChanging(string value);
    partial void OnncontentChanged();
    partial void OnntimeChanging(System.Nullable<System.DateTime> value);
    partial void OnntimeChanged();
    partial void OnnidChanging(int value);
    partial void OnnidChanged();
    #endregion
		
		public news()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ntitle", DbType="NVarChar(100)")]
		public string ntitle
		{
			get
			{
				return this._ntitle;
			}
			set
			{
				if ((this._ntitle != value))
				{
					this.OnntitleChanging(value);
					this.SendPropertyChanging();
					this._ntitle = value;
					this.SendPropertyChanged("ntitle");
					this.OnntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ncontent", DbType="NVarChar(1000)")]
		public string ncontent
		{
			get
			{
				return this._ncontent;
			}
			set
			{
				if ((this._ncontent != value))
				{
					this.OnncontentChanging(value);
					this.SendPropertyChanging();
					this._ncontent = value;
					this.SendPropertyChanged("ncontent");
					this.OnncontentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ntime", DbType="DateTime")]
		public System.Nullable<System.DateTime> ntime
		{
			get
			{
				return this._ntime;
			}
			set
			{
				if ((this._ntime != value))
				{
					this.OnntimeChanging(value);
					this.SendPropertyChanging();
					this._ntime = value;
					this.SendPropertyChanged("ntime");
					this.OnntimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_nid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int nid
		{
			get
			{
				return this._nid;
			}
			set
			{
				if ((this._nid != value))
				{
					this.OnnidChanging(value);
					this.SendPropertyChanging();
					this._nid = value;
					this.SendPropertyChanged("nid");
					this.OnnidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.race")]
	public partial class race : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _rid;
		
		private string _rname;
		
		private string _ryear;
		
		private System.DateTime _rstartdate;
		
		private System.DateTime _renddate;
		
		private string _rcontent;
		
		private string _rrequire;
		
		private System.Nullable<bool> _rsubmit;
		
		private EntitySet<eroll> _eroll;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnridChanging(int value);
    partial void OnridChanged();
    partial void OnrnameChanging(string value);
    partial void OnrnameChanged();
    partial void OnryearChanging(string value);
    partial void OnryearChanged();
    partial void OnrstartdateChanging(System.DateTime value);
    partial void OnrstartdateChanged();
    partial void OnrenddateChanging(System.DateTime value);
    partial void OnrenddateChanged();
    partial void OnrcontentChanging(string value);
    partial void OnrcontentChanged();
    partial void OnrrequireChanging(string value);
    partial void OnrrequireChanged();
    partial void OnrsubmitChanging(System.Nullable<bool> value);
    partial void OnrsubmitChanged();
    #endregion
		
		public race()
		{
			this._eroll = new EntitySet<eroll>(new Action<eroll>(this.attach_eroll), new Action<eroll>(this.detach_eroll));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int rid
		{
			get
			{
				return this._rid;
			}
			set
			{
				if ((this._rid != value))
				{
					this.OnridChanging(value);
					this.SendPropertyChanging();
					this._rid = value;
					this.SendPropertyChanged("rid");
					this.OnridChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rname", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string rname
		{
			get
			{
				return this._rname;
			}
			set
			{
				if ((this._rname != value))
				{
					this.OnrnameChanging(value);
					this.SendPropertyChanging();
					this._rname = value;
					this.SendPropertyChanged("rname");
					this.OnrnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ryear", DbType="VarChar(20)")]
		public string ryear
		{
			get
			{
				return this._ryear;
			}
			set
			{
				if ((this._ryear != value))
				{
					this.OnryearChanging(value);
					this.SendPropertyChanging();
					this._ryear = value;
					this.SendPropertyChanged("ryear");
					this.OnryearChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rstartdate", DbType="DateTime NOT NULL")]
		public System.DateTime rstartdate
		{
			get
			{
				return this._rstartdate;
			}
			set
			{
				if ((this._rstartdate != value))
				{
					this.OnrstartdateChanging(value);
					this.SendPropertyChanging();
					this._rstartdate = value;
					this.SendPropertyChanged("rstartdate");
					this.OnrstartdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_renddate", DbType="DateTime NOT NULL")]
		public System.DateTime renddate
		{
			get
			{
				return this._renddate;
			}
			set
			{
				if ((this._renddate != value))
				{
					this.OnrenddateChanging(value);
					this.SendPropertyChanging();
					this._renddate = value;
					this.SendPropertyChanged("renddate");
					this.OnrenddateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rcontent", DbType="NVarChar(1000)")]
		public string rcontent
		{
			get
			{
				return this._rcontent;
			}
			set
			{
				if ((this._rcontent != value))
				{
					this.OnrcontentChanging(value);
					this.SendPropertyChanging();
					this._rcontent = value;
					this.SendPropertyChanged("rcontent");
					this.OnrcontentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rrequire", DbType="NVarChar(500)")]
		public string rrequire
		{
			get
			{
				return this._rrequire;
			}
			set
			{
				if ((this._rrequire != value))
				{
					this.OnrrequireChanging(value);
					this.SendPropertyChanging();
					this._rrequire = value;
					this.SendPropertyChanged("rrequire");
					this.OnrrequireChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_rsubmit", DbType="Bit")]
		public System.Nullable<bool> rsubmit
		{
			get
			{
				return this._rsubmit;
			}
			set
			{
				if ((this._rsubmit != value))
				{
					this.OnrsubmitChanging(value);
					this.SendPropertyChanging();
					this._rsubmit = value;
					this.SendPropertyChanged("rsubmit");
					this.OnrsubmitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="race_eroll", Storage="_eroll", ThisKey="rid", OtherKey="rid")]
		public EntitySet<eroll> eroll
		{
			get
			{
				return this._eroll;
			}
			set
			{
				this._eroll.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_eroll(eroll entity)
		{
			this.SendPropertyChanging();
			entity.race = this;
		}
		
		private void detach_eroll(eroll entity)
		{
			this.SendPropertyChanging();
			entity.race = null;
		}
	}
}
#pragma warning restore 1591
